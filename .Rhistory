#factor
#factors are special vectors used to represent categorial data
#to create a fator, we use a factor function
continent <- factor(c("Asia", "America", "Europe"))
continent
str(continent)
#Lists: generic vectors = collection of elements with different data types
#example: using numerical and character types in 1 list
l <- list("Afghanistan", "Albania", 1952, 876897)
l
typeof(l)
str(l)
#####Challenge2.3#####
myorder <- list(c("chicken, soup, salad, tea"),
factor(c("liquid", "solid")),
c(4.99, 2.99, 3.29))
myorder
help(factor)
myorder <- list(menu_items,
factor(menu_items, c("solid", "liquid", "solid", "liquid")),
c(4.99, 2.99, 3.29))
#####Challenge2.3#####
menu_items <- c("chicken, soup, salad, tea")
myorder <- list(menu_items,
factor(menu_items, c("solid", "liquid", "solid", "liquid")),
c(4.99, 2.99, 3.29))
myorder
factor(c("solid", "liquid", "solid", "liquid"),
myorder
myorder <- list(menu_items,
myorder <- list(menu_items,
factor(c("solid", "liquid", "solid", "liquid")),
c(4.99, 2.99, 3.29))
myorder
#####Challenge2.3#####
items <- c("chicken, soup, salad, tea")
types <- factor(c("solid", "liquid", "solid", "liquid"))
cost <- c(4.99, 2.99, 3.29)
myorder <- list(items, types, cost)
myorder
#Data Frame
myorder <- list(items,typescost)
#Data Frame
myorder <- list(items,types, cost)
myorder_df <- data.frame(items,types,cost)
#Data Frame
myorder <- list(items,types, cost)
myorder_df <- data.frame(items,types,cost)
#####Challenge2.3#####
items <- c("chicken, soup, salad, tea")
types <- factor(c("solid", "liquid", "solid", "liquid"))
cost <- c(4.99, 2.99, 3.29)
myorder <- list(items, types, cost)
myorder
#Data Frame
myorder <- list(items, types, cost)
myorder_df <- data.frame(items, types, cost)
##Data Frame
# really similar to excel layout
# most important data structure for data analysis and etc.
meunItems <- c("chicken", "soup, "salad", "tea"")
##Data Frame
# really similar to excel layout
# most important data structure for data analysis and etc.
meunItems <- c("chicken", "soup, "salad", "tea")
##Data Frame
# really similar to excel layout
# most important data structure for data analysis and etc.
menuItems <- c("chicken", "soup, "salad", "tea")
##Data Frame
# really similar to excel layout
# most important data structure for data analysis and etc.
menuItems <- c("chicken", "soup", "salad", "tea")
myorder_df <- data.frame(menuItems, menuType, menuCost)
myOrder_df
##Data Frame
# really similar to excel layout
# most important data structure for data analysis and etc.
menuItems <- c("chicken", "soup", "salad", "tea")
menuType <- factor(c("solid", "liquid", "solid", "liquid"))
menuCost <- c(4.99, 2.99, 3.29)
myOrder_df <- data.frame(menuItems, menuType, menuCost)
myOrder_df
##Data Frame
# really similar to excel layout
# most important data structure for data analysis and etc.
menuItems <- c("chicken", "soup", "salad", "tea")
menuType <- factor(c("solid", "liquid", "solid", "liquid"))
menuCost <- c(4.99, 2.99, 3.29)
myOrder_df <- data.frame(menuItems, menuType, menuCost)
myOrder_df
myOrder_df <- data.frame(menuItems, menuType, menuCost)
##Data Frame
# really similar to excel layout
# most important data structure for data analysis and etc.
menuItems <- c("chicken", "soup", "salad", "tea")
menuType <- factor(c("solid", "liquid", "solid", "liquid"))
menuCost <- c(4.99, 2.99, 3.29)
myOrder_df <- data.frame(menuItems, menuType, menuCost)
ggplot (data = gapminder, aes(x = gdpPercap, fill = continent)) +
geom_density(alpha = .6, data = gapminder) +
scale_x_log10() + face_wrap(~continent)
ggplot (data = gapminder, aes(x = gdpPercap, fill = continent)) +
geom_density(alpha = .6, data = gapminder) +
scale_x_log10() + face_wrap(~continent)
source('~/Documents/SWC Data/ggplot2.R', echo=TRUE)
ggplot (data = gapminder, aes(x = gdpPercap, fill = continent)) +
geom_density(alpha = .6, data = gapminder) +
scale_x_log10() + facet_wrap(~continent)
gapminder <- read.table("./Data/gapminder.txt")
library(ggplot2)
#### Challenge 1 ####
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
View(gapminder)
as.numeric(myData$V4)<70
source('~/Documents/SWC Data/R_subsetting.R', echo=TRUE)
as.numeric(myData$V4)<70
as.numeric(myData$V4)
unique(myData$V1)
as.numeric(myData$V4)
